MMR: A Tool for Read Multi-Mapper Resolution
============================================

Motivation
----------
Mapping high throughput sequencing data to a reference genome is an
essential step for most analysis pipelines aiming at the computational
analysis of genome and transcriptome sequencing data. Breaking ties
between equally likely mapping locations still poses a severe problem
not only during the alignment phase but also has significant impact
how the data can be used for further analyses. We present the
multimapper resolution (MMR) tool that infers the best mapping
location only on the distribution of mapped reads.

Principle
---------
We follow a simple strategy that locally minimizes the variability
("roughness") of position-wise coverage within a window of given
length.  By comparing the local "roughness" around two possible
alignments/mappings of the same read, we can iteratively select the
best alignments/mappings for all reads to obtain "smooth" coverage
everywhere. Additional information, such as transcript structure, to
accounting for expected differences in local coverage can be
incorporated. 

Installation and Dependencies
-----------------------------
MMR has been developed in a *nix environment and has been successfully
compiled using gcc versions 4.4.7 and above. 

For compiling on MacOS X, it is necessary to exchange the native gcc
compiler with a newer version (e.g., install gcc47 via macports and
make it available by 'sudo port select --set gcc mp-gcc47').

Further, to successfully parse alignment files in BAM format, MMR
requires a working samtools binary that is accessibly via the PATH
environment variable.

You can test the success of your installation with the example data 
contained within this package. A smaller test case is available by
typing:
    make test
If you have more than 13GB of memory available you can also run the
test on the human genome using:
    make bigtest
Each test will state at the end whether it was completed successfully.

Common Usage
------------
The tool takes a read alignment file in BAM format as input. The input 
BAM file is assumed to have multiple alignments per read.
The output is a new BAM file that has selected alignment marked in the 
tags. If one uses the -b option, at most one alignment will be saved per 
read which can lead to a significant file size reduction.
The individual arguments are described below.


Usage:
    ./mmr -o OUTFILE [options] IN_BAM

Available Options:


    Input handling and parallelization:
    -P --parse-complete     parse complete file into memory [off]
    -t --threads            number of threads to use (must be > 2) [1]
    -S --strand-specific    alignments are strand specific [off]
    -C --init-secondary     choose initial alignment also from secondary lines (flag 256) [off]

    Input file filtering:
    -f --pre-filter-off     switch off pre filter for alignments that have F more edit ops than the best [on]
    -F --filter-dist [INT]  filter distance F for pre-filter [1]
    -V --use-variants       use variant alignments for filtering (different edit op count,
                            requires XG and XM Tag in alignment files) [off]
    -L --max-list-length [INT]  max length of alignment list per read (after filtering) [1000]
    -r --trim-id            trim this many positions from the end of each read ID [0]

    Paired alignment handling:
    -p --pair-usage         pre use pair information in the reads [off]
    -i --max-fragment-size  upper limit of GENOMIC fragment length [1 000 000]
    -A --max-pair-list-length [INT] max no of valid pairs before not using pair modus [10000]

    Output handling:
    -b --best-only          print only best alignment [off]
    -u --keep-unmapped      print unmapped reads from input [off]

    Options for using the variance optimization:
    -w --windowsize  [INT]  size of coverage window around read [20]
    -I --iterations  [INT]  number of iterations to smooth the coverage [5]
    -a --annotation         annotation file in GTF format to infer segment boundaries []
    -B --burn-in            use the first iteration to fill coverage map only [off]

    Options for using the MiTie objective for smoothing:
    -m --mitie-objective    use objective from MiTie instead of local variance [off]
    -s --segmentfile        MiTie segment file required for MiTie optimization []
    -l --lossfile           MiTie loss parameter file required for MiTie optimization []
    -R --read-len  [INT]    average length of the reads [75]
    -M --mitie-variance     use variance smoothing for regions with no MiTie prediction [off]
    -z --zero-expect-unpred     initializes all covered but not predicted positions with expectation 0.0 [off]

    General:
    -v --verbose            switch on verbose output [off]
    -h --help               print usage info

Input File Formats
-------------------
Input alignment files are expected to follow the SAM format
specification and should have compressed (BAM) format.

The files required for an optimization in the context of MiTie have
the following formats:

    loss file: Tab delimited file that describes the support points of
        the loss function. The file needs to have the following five
        columns:
            1   observation             int
            2   quadratic term left     float
            3   linear term left        float
            4   quadratic term right    float
            5   linear term right       float

    segment file: Tab delimited file with six columns that defines
        intronic and exonic segments as follows:
            1   segment category        s for exonic, i for intronic
            2   contig/chromosome name  STR
            3   strand                  +/-
            4   segment start           int (closed interval) 
            5   segment end             int (closed interval)
            6   segment evidence        float
        
License
-------
This documentation is subject to the GNU Free Documentation License 
as given in file LICENSE.
